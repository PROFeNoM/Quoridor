#include <assert.h>

#include "graph_pattern.h"
#include "test_graph_pattern.h"

#define TESTCASE(X, Y) printf("%s ... %s\n", X, Y() ? "PASSED" : "FAILED");

int test__c_constraint()
{
  assert(c_constraint(-2)==0);
  assert(c_constraint(0)==0);
  assert(c_constraint(2)!=0);
  assert(c_constraint(22)!=0);

  return 1;
}

int test__t_constraint()
{
  assert(t_constraint(-2)==0);
  assert(t_constraint(0)==0);
  assert(t_constraint(2)==0);
  assert(t_constraint(33)!=0);

  return 1;
}

int test__h_constraint()
{
  assert(h_constraint(-2)==0);
  assert(h_constraint(0)==0);
  assert(h_constraint(2)==0);
  assert(h_constraint(33)!=0);

  return 1;
}

int test__s_constraint()
{
  assert(s_constraint(-2)==0);
  assert(s_constraint(0)==0);
  assert(s_constraint(2)==0);
  assert(s_constraint(5)!=0);
  assert(s_constraint(36)==0);

  return 1;
}
  
int test__get_direction_square()
{

  size_t i_1 = 0;
  size_t j_1 = 0;
  size_t m_1 = 5;
  
  assert(get_direction_square(i_1,j_1,m_1)==NO_DIRECTION);

  size_t i_2 = 0;
  size_t j_2 = 5;
  size_t m_2 = 5;

  assert(get_direction_square(i_2,j_2,m_2)==SOUTH);

  size_t i_3 = 4;
  size_t j_3 = 3;
  size_t m_3 = 5;

  assert(get_direction_square(i_3,j_3,m_3)==WEST);

  size_t i_4 = 3;
  size_t j_4 = 4;
  size_t m_4 = 5;

  assert(get_direction_square(i_4,j_4,m_4)==EAST);

  size_t i_5 = 7;
  size_t j_5 = 2;
  size_t m_5 = 5;

  assert(get_direction_square(i_5,j_5,m_5)==NORTH);

  size_t i_6 = 7;
  size_t j_6 = 2;
  size_t m_6 = 6;

  assert(get_direction_square(i_6,j_6,m_6)==NO_DIRECTION);

  size_t i_7 = 5;
  size_t j_7 = 6;
  size_t m_7 = 6;

  assert(get_direction_square(i_7,j_7,m_7)==NO_DIRECTION);

  return 1;
}

int test__square(){

  size_t x_1 = 5;
  size_t y_1 = 18;
  size_t m_1 = 5;

  assert(square(x_1,y_1,m_1)==0);

  size_t x_2 = 22;
  size_t y_2 = 9;
  size_t m_2 = 18;

  assert(square(x_2,y_2,m_2)==0);

  return 1;
}

int test__graph_square()
{
  size_t m = 3;
  gsl_spmatrix_uint *matrix = gsl_spmatrix_uint_alloc(m * m, m * m);

  int vertex_1[] = {0,2,4,5,6,7,8};

  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,0,vertex_1[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,0,1,EAST);
  gsl_spmatrix_uint_set(matrix,0,3,SOUTH);

  int vertex_2[] = {1,3,5,6,7,8};

  for (int i = 0 ; i<6 ; i++){
    gsl_spmatrix_uint_set(matrix,1,vertex_2[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,1,0,WEST);
  gsl_spmatrix_uint_set(matrix,1,2,EAST);
  gsl_spmatrix_uint_set(matrix,1,4,SOUTH);

  int vertex_3[] = {0,2,3,4,6,7,8};

  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,2,vertex_3[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,2,1,WEST);
  gsl_spmatrix_uint_set(matrix,2,5,SOUTH);

  int vertex_4[] = {1,2,3,5,7,8};

  for (int i = 0 ; i<6 ; i++){
    gsl_spmatrix_uint_set(matrix,3,vertex_4[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,3,0,NORTH);
  gsl_spmatrix_uint_set(matrix,3,6,SOUTH);
  gsl_spmatrix_uint_set(matrix,3,4,EAST);

  int vertex_5[] = {0,2,4,6,8};
  
  for (int i = 0 ; i<5 ; i++){
    gsl_spmatrix_uint_set(matrix,4,vertex_5[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,4,1,NORTH);
  gsl_spmatrix_uint_set(matrix,4,7,SOUTH);
  gsl_spmatrix_uint_set(matrix,4,5,EAST);
  gsl_spmatrix_uint_set(matrix,4,3,WEST);

  int vertex_6[] = {0,1,3,5,6,7};
  
  for (int i = 0 ; i<6 ; i++){
    gsl_spmatrix_uint_set(matrix,5,vertex_6[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,5,2,NORTH);
  gsl_spmatrix_uint_set(matrix,5,8,SOUTH);
  gsl_spmatrix_uint_set(matrix,5,4,WEST);

  int vertex_7[] = {0,1,2,4,5,6,8};
  
  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,6,vertex_7[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,6,3,NORTH);
  gsl_spmatrix_uint_set(matrix,6,7,EAST);

  int vertex_8[] = {0,1,2,3,5,7};
  
  for (int i = 0 ; i<6 ; i++){
    gsl_spmatrix_uint_set(matrix,7,vertex_8[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,7,4,NORTH);
  gsl_spmatrix_uint_set(matrix,7,6,WEST);
  gsl_spmatrix_uint_set(matrix,7,8,EAST);

  int vertex_9[] = {0,1,2,3,4,6,8};
  
  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,8,vertex_9[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,8,5,NORTH);
  gsl_spmatrix_uint_set(matrix,8,7,WEST);

  gsl_spmatrix_uint *matrix_test = square_graph(m);

  assert(gsl_spmatrix_uint_equal(matrix,matrix_test) == 1);

  gsl_spmatrix_uint_free(matrix);
  gsl_spmatrix_uint_free(matrix_test);

  return 1;
}

int test__is_in_hole()
{
  size_t x_1 = 5;
  size_t y_1 = 3;
  size_t x_begin_1 = 0;
  size_t y_begin_1 = 2;
  size_t x_size_1 = 6;
  size_t y_size_1 = 3;

  assert(is_in_hole(x_1,y_1,x_begin_1,y_begin_1,x_size_1,y_size_1));

  size_t x_2 = 5;
  size_t y_2 = 3;
  size_t x_begin_2 = 0;
  size_t y_begin_2 = 2;
  size_t x_size_2 = 2;
  size_t y_size_2 = 3;

  assert(! is_in_hole(x_2,y_2,x_begin_2,y_begin_2,x_size_2,y_size_2));

  size_t x_3 = 4;
  size_t y_3 = 7;
  size_t x_begin_3 = 0;
  size_t y_begin_3 = 2;
  size_t x_size_3 = 6;
  size_t y_size_3 = 1;

  assert(! is_in_hole(x_3,y_3,x_begin_3,y_begin_3,x_size_3,y_size_3));

  return 1; 
}

int test__toric()
{

  size_t x_1 = 1;
  size_t y_1 = 1;
  size_t m_1 = 3;
  assert (toric(x_1,y_1,m_1)!=0);

  size_t x_2 = 2;
  size_t y_2 = 2;
  size_t m_2 = 12;
  assert (toric(x_2,y_2,m_2)==0);

  size_t x_3 = 6;
  size_t y_3 = 6;
  size_t m_3 = 12;
  assert (toric(x_3,y_3,m_3)!=0);

  return 1;
}

int test__t_graph()
{
  size_t m = 3;
  gsl_spmatrix_uint *matrix = gsl_spmatrix_uint_alloc(m * m, m * m);

  int vertex_1[] = {0,2,4,5,6,7,8};

  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,0,vertex_1[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,0,1,EAST);
  gsl_spmatrix_uint_set(matrix,0,3,SOUTH);

  int vertex_2[] = {1,3,4,5,6,7,8};

  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,1,vertex_2[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,1,0,WEST);
  gsl_spmatrix_uint_set(matrix,1,2,EAST);

  int vertex_3[] = {0,2,3,4,6,7,8};

  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,2,vertex_3[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,2,1,WEST);
  gsl_spmatrix_uint_set(matrix,2,5,SOUTH);

  int vertex_4[] = {1,2,3,4,5,7,8};

  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,3,vertex_4[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,3,0,NORTH);
  gsl_spmatrix_uint_set(matrix,3,6,SOUTH);

  int vertex_5[] = {0,1,2,3,4,5,6,7,8};
  
  for (int i = 0 ; i<9 ; i++){
    gsl_spmatrix_uint_set(matrix,4,vertex_5[i],NOT_CONNECTED);
  }

  int vertex_6[] = {0,1,3,4,5,6,7};
  
  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,5,vertex_6[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,5,2,NORTH);
  gsl_spmatrix_uint_set(matrix,5,8,SOUTH);

  int vertex_7[] = {0,1,2,4,5,6,8};
  
  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,6,vertex_7[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,6,3,NORTH);
  gsl_spmatrix_uint_set(matrix,6,7,EAST);

  int vertex_8[] = {0,1,2,3,4,5,7};
  
  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,7,vertex_8[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,7,6,WEST);
  gsl_spmatrix_uint_set(matrix,7,8,EAST);

  int vertex_9[] = {0,1,2,3,4,6,8};
  
  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,8,vertex_9[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,8,5,NORTH);
  gsl_spmatrix_uint_set(matrix,8,7,WEST);

  for (int i = 0 ; i<9 ; i++){
    gsl_spmatrix_uint_set(matrix,i,4,NOT_CONNECTED);
  }

  gsl_spmatrix_uint *matrix_test = t_graph(m); 

  assert(gsl_spmatrix_uint_equal(matrix,matrix_test) == 1);
  
  gsl_spmatrix_uint_free(matrix);
  gsl_spmatrix_uint_free(matrix_test);

  return 1;
}

int test__h()
{
  size_t x_1 = 1;
  size_t y_1 = 1;
  size_t m_1 = 3;
  assert (h(x_1,y_1,m_1)==0);

  size_t x_2 = 0;
  size_t y_2 = 1;
  size_t m_2 = 3;
  assert (h(x_2,y_2,m_2)==0);

  size_t x_3 = 11;
  size_t y_3 = 6;
  size_t m_3 = 12;
  assert (h(x_3,y_3,m_3)==0);

  return 1;
}

int test__h_graph()
{
  size_t m = 3;
  gsl_spmatrix_uint *matrix = gsl_spmatrix_uint_alloc(m * m, m * m);

  int vertex_1[] = {0,2,4,5,6,7,8};

  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,0,vertex_1[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,0,1,EAST);
  gsl_spmatrix_uint_set(matrix,0,3,SOUTH);

  int vertex_2[] = {0,1,2,3,4,5,6,7,8};

  for (int i = 0 ; i<9 ; i++){
    gsl_spmatrix_uint_set(matrix,1,vertex_2[i],NOT_CONNECTED);
  }

  int vertex_3[] = {0,2,3,4,6,7,8};

  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,2,vertex_3[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,2,1,WEST);
  gsl_spmatrix_uint_set(matrix,2,5,SOUTH);

  int vertex_4[] = {1,2,3,5,7,8};

  for (int i = 0 ; i<6 ; i++){
    gsl_spmatrix_uint_set(matrix,3,vertex_4[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,3,0,NORTH);
  gsl_spmatrix_uint_set(matrix,3,6,SOUTH);
  gsl_spmatrix_uint_set(matrix,3,4,EAST);

  int vertex_5[] = {0,1,2,4,6,7,8};
  
  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,4,vertex_5[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,4,5,EAST);
  gsl_spmatrix_uint_set(matrix,4,3,WEST);

  int vertex_6[] = {0,1,3,5,6,7};
  
  for (int i = 0 ; i<6 ; i++){
    gsl_spmatrix_uint_set(matrix,5,vertex_6[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,5,2,NORTH);
  gsl_spmatrix_uint_set(matrix,5,8,SOUTH);
  gsl_spmatrix_uint_set(matrix,5,4,WEST);

  int vertex_7[] = {0,1,2,4,5,6,8};
  
  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,6,vertex_7[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,6,3,NORTH);
  gsl_spmatrix_uint_set(matrix,6,7,EAST);

  int vertex_8[] = {0,1,2,3,4,5,6,7,8};
  
  for (int i = 0 ; i<9 ; i++){
    gsl_spmatrix_uint_set(matrix,7,vertex_8[i],NOT_CONNECTED);
  }

  int vertex_9[] = {0,1,2,3,4,6,8};
  
  for (int i = 0 ; i<7 ; i++){
    gsl_spmatrix_uint_set(matrix,8,vertex_9[i],NO_DIRECTION);
  }
  gsl_spmatrix_uint_set(matrix,8,5,NORTH);
  gsl_spmatrix_uint_set(matrix,8,7,WEST);

  for (int i = 0 ; i<9 ; i++){
    gsl_spmatrix_uint_set(matrix,i,1,NOT_CONNECTED);
    gsl_spmatrix_uint_set(matrix,i,7,NOT_CONNECTED);
  }

  gsl_spmatrix_uint *matrix_test = h_graph(m); 

  assert(gsl_spmatrix_uint_equal(matrix,matrix_test) == 1);
  
  gsl_spmatrix_uint_free(matrix);
  gsl_spmatrix_uint_free(matrix_test);

  return 1;
}

int test__snake()
{
  size_t x_1 = 2;
  size_t y_1 = 0;
  size_t m_1 = 15;
  assert (snake(x_1,y_1,m_1)==0);

  size_t x_2 = 7;
  size_t y_2 = 7;
  size_t m_2 = 15;
  assert (snake(x_2,y_2,m_2)!=0);

  size_t x_3 = 7;
  size_t y_3 = 14;
  size_t m_3 = 15;

  assert (snake(x_3,y_3,m_3)!=0);

  return 1;
}

int test__matrix_position()
{

  size_t m_1 = 3;
  gsl_spmatrix_uint *matrix_1 = gsl_spmatrix_uint_alloc(2,9);
  for (size_t i = 0 ; i< m_1 ; i++){
    gsl_spmatrix_uint_set(matrix_1,0,i,1);
    gsl_spmatrix_uint_set(matrix_1,1,8-i,1);
  }

  gsl_spmatrix_uint *matrix_test_1 = matrix_position(m_1);
  assert(gsl_spmatrix_uint_equal(matrix_1,matrix_test_1) == 1);

  size_t m_2 = 9;
  gsl_spmatrix_uint *matrix_2 = gsl_spmatrix_uint_alloc(2,81);
  for (size_t i = 0 ; i< m_2 ; i++){
    gsl_spmatrix_uint_set(matrix_2,0,i,1);
    gsl_spmatrix_uint_set(matrix_2,1,80-i,1);
  }

  gsl_spmatrix_uint *matrix_test_2 = matrix_position(m_2);
  assert(gsl_spmatrix_uint_equal(matrix_2,matrix_test_2) == 1);

  return 1;
}

int test__h_matrix_position()
{

  size_t m_1 = 3;
  gsl_spmatrix_uint *matrix_1 = gsl_spmatrix_uint_alloc(2,9);
  for (size_t i = 0 ; i< m_1 ; i++){
    if (i < 3 / 3 || i >= 2 * 3 / 3){
      gsl_spmatrix_uint_set(matrix_1,0,i,1);
      gsl_spmatrix_uint_set(matrix_1,1,8-i,1);
    }
  }

  gsl_spmatrix_uint *matrix_test_1 = h_matrix_position(m_1);
  assert(gsl_spmatrix_uint_equal(matrix_1,matrix_test_1) == 1);
  
  size_t m_2 = 9;
  gsl_spmatrix_uint *matrix_2 = gsl_spmatrix_uint_alloc(2,81);
  for (size_t i = 0 ; i< m_2 ; i++){
    if (i < 9 / 3 || i >= 2 * 9 / 3){
      gsl_spmatrix_uint_set(matrix_2,0,i,1);
      gsl_spmatrix_uint_set(matrix_2,1,80-i,1);
    }
  }

  gsl_spmatrix_uint *matrix_test_2 = h_matrix_position(m_2);
  assert(gsl_spmatrix_uint_equal(matrix_2,matrix_test_2) == 1);

  
  return 1;
}
  
int main(int argc, char *argv[])
{
    (void)argc;
    (void)argv;
    TESTCASE("Test of c_contraint", test__c_constraint);
    TESTCASE("Test of t_contraint", test__t_constraint);
    TESTCASE("Test of h_contraint", test__h_constraint);
    TESTCASE("Test of s_contraint", test__s_constraint);
    TESTCASE("Test of get_square_direction", test__get_direction_square);
    TESTCASE("Test of square", test__square);
    TESTCASE("Test of graph_square", test__graph_square);
    TESTCASE("Test of is_in_hole", test__is_in_hole);
    TESTCASE("Test of toric", test__toric);
    TESTCASE("Test of t_graph", test__t_graph);
    TESTCASE("Test of h", test__h);
    TESTCASE("Test of h_graph", test__h_graph);
    TESTCASE("Test of snake", test__snake);
    TESTCASE("Test of matrix_position", test__matrix_position);
    TESTCASE("Test of h_matrix_position", test__h_matrix_position);
    return 0;
}

